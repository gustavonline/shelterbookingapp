@page "/shelterbooking"
@inject HttpClient Http;
@using ShelterBookingApp.Shared.Models;
@inject NavigationManager NavManager;
@inject IModalService ModalService;

<h3>ShelterPage</h3>

@if (IsLoading)
{
    <div class="spinner"></div>
}
else
{
    <div class="card-deck">
    </div>
}

<div class="row">
    <div class="col-md-3">
        @* @OnInput created in order to filter the list of shelters *@
        <input type="text" class="form-control" placeholder="Search by Shelter Name" @bind="SearchInput" @oninput="FilterShelters">
    </div>
</div>

<table class="table table-striped">
    <thead>
    <tr>
        <th>Name</th>
        <th>Capacity</th>
        <th>Municipality</th>
        <th></th>

    </tr>
    </thead>
    <tbody>
    @foreach (var shelter in FilteredShelters)
    {
            
            <tr>
                <td>@shelter.Properties.Name</td>
                <td>@shelter.Properties.Capacity</td>
                <td>@shelter.Properties.Municipality</td>
                <td><button class="btn btn-success" type="button" @onclick="() => GoToPage(shelter.Id)"> Book</button></td>
            </tr>
    }
    </tbody>
</table>





@code {
    private List<Shelter> Shelters { get; set; } = new List<Shelter>();

    // New list and property to hold the filtered shelters
    private List<Shelter> FilteredShelters { get; set; } = new();
    private string SearchInput { get; set; } = "";

    private bool IsLoading = true;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            IsLoading = true;
            Console.WriteLine("Get shelterlist from client ");
            Shelters = await Http.GetFromJsonAsync<List<Shelter>>("https://localhost:7269/api/Shelter");
            FilteredShelters = Shelters;
        }
        // 
        finally
        {
            IsLoading = false;
        }
    }
    


    public void GoToPage(string shelterId)
    {

        NavManager.NavigateTo($"/booking?shelterId={shelterId}");
    }
    
    // Using change event to filter the list of shelters. Using LINQ where method to filter the list of shelters based on the search input.
    private void FilterShelters(ChangeEventArgs e)
    {
        SearchInput = e.Value.ToString();
        FilteredShelters = string.IsNullOrWhiteSpace(SearchInput)
            ? Shelters
            : Shelters.Where(s => s.Properties.Name.Contains(SearchInput, StringComparison.OrdinalIgnoreCase)).ToList();
    }

}
