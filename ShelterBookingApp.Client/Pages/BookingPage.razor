@page "/booking"
@using ShelterBookingApp.Shared.Models;
@inject HttpClient Http; 
@using Radzen.Blazor; 
@inject NavigationManager navManager; 




<h3>Booking</h3>
@if (yourShelter != null)
{
    <p>You have chosen: @yourShelter.Properties.Name</p>


    <p>To book a shelter, please provide us with your personal information below and choose a bookingperiod</p>


    <EditForm EditContext="@editContext" class="row p-3" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="col-md-12 mb-3">
            <label for="Name">Name</label>
            <InputText id="Name" @bind-Value="newBooking.BookeeName" class="form-control" />
        </div>
        <div class="col-md-6 mb-3">
            <label for="Price">PhoneNumber</label>
            <InputNumber id="Phone" @bind-Value="newBooking.BookeePhone" class="form-control" />
        </div>
        <div class="col-md-6 mb-3">
            <label for="Amount">Address</label>
            <InputText id="Address" @bind-Value="newBooking.BookeeAddress" class="form-control" />
        </div>
        <div>
            <label for="StartDate">From: </label>
            <InputDate class="col-md-4 mb-3" @bind-Value="@newBooking.StartDate" />
        </div>
        <div>
            <label for="EndDate">To:&nbsp;&nbsp;</label>
            <InputDate class="col-md-4 mb-3" @bind-Value="@newBooking.EndDate" placeholder="CHooseDate"/>

        </div>

        <div class="col-12 mb-3">
            <button type="submit" class="btn btn-primary">Confirm Booking</button>
        </div>
    </EditForm>



    <div>
        <br/>
        @if (IsDatesOverlapping(newBooking.StartDate, newBooking.EndDate) == true)
        {
            <p style="color:red"> The shelter is unfortunately occupied on the following dates</p>
            <p style="color:red">@overlapMessage</p>
        }
    </div>


<h1 style="color:dodgerblue">@responseMessage</h1>
}

@code {


    [Parameter]
    [SupplyParameterFromQuery]
    public string? shelterId { get; set; }
    public Shelter? yourShelter { get; set; }
    //private string? startDate = DateTime.UtcNow.ToString("D");
    //private string? endDate = DateTime.UtcNow.ToString("D");
    private Booking newBooking { get; set; } = new Booking();
    public EditContext editContext;
    private string responseMessage; 
    private List<Booking> bookingList = new List<Booking>(); 
    private string overlapMessage = ""; 


    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(newBooking);
        newBooking.StartDate = DateTime.UtcNow;
        newBooking.EndDate = DateTime.UtcNow; 

        if (shelterId != null)
        {
            // Retrieving the Shelter object that has the specified shelterId
            var shelter = await Http.GetFromJsonAsync<Shelter>("https://localhost:7269/api/Shelter/" + shelterId);

            var bookings = await Http.GetFromJsonAsync<List<Booking>>("https://localhost:7269/api/Booking/");

            // Setting our local variable to the returned shelter object
            yourShelter = shelter;
            bookingList = bookings; 
        }


    }

    public async Task HandleValidSubmit()
    {
        await CreateBooking();
        

    }

  

    public async Task CreateBooking()
    {
        newBooking.ObjectId = "";
        newBooking.ShelterId = shelterId;

        var response = await Http.PostAsJsonAsync<Booking>("https://localhost:7269/api/Booking", newBooking);

        //Setting http responsemessage from controller
        responseMessage = await response.Content.ReadAsStringAsync();

        //Setting newbooking
        newBooking = new Booking();
        newBooking.StartDate = DateTime.UtcNow;
        newBooking.EndDate = DateTime.UtcNow;  

    }

    public bool IsDatesOverlapping(DateTime startDate, DateTime endDate)
    {
        foreach (var b in bookingList)
        {
            if (startDate < b.EndDate && endDate > b.StartDate)
            {
                overlapMessage = b.StartDate.ToString("d") + " to " +  b.EndDate.ToString("d");
                return true;
            }
        }

        return false;
    }

    
    //private async void ReloadPage()
    //{
    //    await Task.Delay(5000); 
    //    navManager.NavigateTo(navManager.Uri, true);
    //}
    


}
