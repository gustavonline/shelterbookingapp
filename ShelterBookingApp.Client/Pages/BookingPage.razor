@page "/booking"
@using ShelterBookingApp.Shared.Models;
@inject HttpClient Http; 
@using Radzen.Blazor; 
@using Radzen.Blazor.Rendering
@inject NavigationManager navManager; 



<h3>Booking</h3>
@if (yourShelter != null)
{
    <p>You have chosen: @yourShelter.Properties.Name</p>


    <p>To book a shelter, please provide us with your personal information below and choose a bookingperiod</p>


    <EditForm EditContext="@editContext" class="row p-3" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="col-md-12 mb-3">
            <label for="Name">Name</label>
            <InputText id="Name" @bind-Value="newBooking.BookeeName" class="form-control" />
        </div>
        <div class="col-md-6 mb-3">
            <label for="Price">PhoneNumber</label>
            <InputNumber id="Phone" @bind-Value="newBooking.BookeePhone" class="form-control" />
        </div>
        <div class="col-md-6 mb-3">
            <label for="Amount">Address</label>
            <InputText id="Address" @bind-Value="newBooking.BookeeAddress" class="form-control" />
        </div>
        <div>
            <label for="StartDate">From: </label>
            <InputDate class="col-md-4 mb-3" @bind-Value="@newBooking.StartDate" />
        </div>
        <div>
            <label for="EndDate">To:&nbsp;&nbsp;</label>
            <InputDate class="col-md-4 mb-3" @bind-Value="@newBooking.EndDate" placeholder="CHooseDate"/>

        </div>
        <button  class="bt--btnConfirm" type="submit">Confirm!</button>
    </EditForm>

    <div>
        <br/>
        @if (IsDatesOverlapping(newBooking.StartDate, newBooking.EndDate) && DateTime.Compare(newBooking.StartDate, newBooking.EndDate) != 0)
    {
            <p style="color:red"> Shelter occupied on these dates: </p>
            <p style="color:red">@overlapMessage</p>
        }
    </div>

    <h1 style="color:dodgerblue">@responseMessage</h1>
    

}

@code {

    [Parameter]
    [SupplyParameterFromQuery]
    public string shelterId { get; set; }
    public Shelter? yourShelter { get; set; }
    private Booking newBooking { get; set; } = new Booking();
    public EditContext editContext;
    private string responseMessage; 
    private List<Booking> bookingList = new List<Booking>(); 
    private string overlapMessage = "";
    private DateTime bookFrom = DateTime.UtcNow;


    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(newBooking);
        newBooking.StartDate = DateTime.UtcNow;
        newBooking.EndDate = DateTime.UtcNow.AddDays(1);

        if (shelterId != null)
        {
            // Retrieving the Shelter object that has the specified shelterId
            var shelter = await Http.GetFromJsonAsync<Shelter>("https://localhost:7269/api/Shelter/" + shelterId);

            var bookings = await Http.GetFromJsonAsync<List<Booking>>("https://localhost:7269/api/Booking/" + shelterId);

            // Setting our local variable to the returned shelter object
            yourShelter = shelter;
            bookingList = bookings; 
        }
    }


    public async Task HandleValidSubmit()
    {
        await CreateBooking();
    }


    public async Task CreateBooking()
    {
        newBooking.ObjectId = "";
        newBooking.ShelterId = shelterId;

        //Hardcoding the input-dates with a time-of-day (checkin and checkout )
        newBooking.StartDate = new DateTime(newBooking.StartDate.Year, newBooking.StartDate.Month, newBooking.StartDate.Day, 14, 00, 00);
        newBooking.EndDate = new DateTime(newBooking.EndDate.Year, newBooking.EndDate.Month, newBooking.EndDate.Day, 11, 00, 00);

        //Adds a day, if startdate is same as enddate
        if (newBooking.StartDate.Date == newBooking.EndDate.Date)
        {
            newBooking.EndDate = newBooking.EndDate.AddDays(1);
        }
        

        //Posting with http.post method to controller
        var response = await Http.PostAsJsonAsync<Booking>("https://localhost:7269/api/Booking", newBooking);

        //Setting http responsemessage from controller
        responseMessage = await response.Content.ReadAsStringAsync();


        //Setting newbooking
        if (response.IsSuccessStatusCode) 
        {
            responseMessage = responseMessage + " from " + newBooking.StartDate.ToString("d") + " to " + newBooking.EndDate.ToString("d") + ". Enjoy your stay!";
            newBooking = new Booking();
            newBooking.StartDate = DateTime.UtcNow;
            newBooking.EndDate = DateTime.UtcNow;  
            editContext = new EditContext(newBooking);

        }
        else
        {
            responseMessage = responseMessage + " from " + newBooking.StartDate.ToString("d") + " to " + newBooking.EndDate.ToString("d") + ". Please choose other dates.";
        }
    }
       

    public bool IsDatesOverlapping(DateTime startDate, DateTime endDate)
    {
        //Hardcoing the input datetime value 
        startDate = new DateTime(startDate.Year, startDate.Month, startDate.Day, 14, 00, 00);
        endDate = new DateTime(endDate.Year, endDate.Month, endDate.Day, 11, 00, 00);
        foreach (var b in bookingList)
        {
            // Checking for overlap of dates, and setting overlapMessage to the first match in bookingList
            if (startDate < b.EndDate && endDate > b.StartDate)
            {
                overlapMessage = b.StartDate.ToString("d") + " to " +  b.EndDate.ToString("d");
                return true;
            }
        }

        return false;
    }


    
   
    


}
